{\rtf1\ansi\ansicpg1252\cocoartf1265
\cocoascreenfonts1{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\deftab720
\pard\pardeftab720

\f0\fs28 \cf2 //Generative composition which makes use of 1st order Markov Models and Randomness.\cf0 \
\
\cf2 //A SynthDef that will allow us to play sound samples from a buffer with an envelope to control duration. \cf0 \
(\
\cf3 SynthDef\cf0 (\cf4 \\sampleplayer\cf0 ,\{\cf3 arg\cf0  bufnum=0, dur=10, amp=0.1, pos=0.5; \
	\
	\cf3 var\cf0  sound, env; \
	\
	env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,1,1,0],[0.1,0.8,0.1]*dur),doneAction:2); \
	\
	sound = \cf3 PlayBuf\cf0 .ar(1,bufnum,rate:\cf3 Rand\cf0 (0.25,1.0),startPos:pos*\cf3 BufFrames\cf0 .ir(bufnum),loop:1);\
	\
	\cf2 //sound = LPF.ar(sound,Rand(2000,10000)); \cf0 \
	\
	\cf3 Out\cf0 .ar(0,\cf3 Pan2\cf0 .ar(sound*env,\cf3 SinOsc\cf0 .kr(\cf3 Rand\cf0 (0.05,0.25)))); \
\}).add; \
\
\cf2 //A SynthDef which creates a comb delay line effect which can be later applied to the samples.\cf0 \
\cf3 SynthDef\cf0 (\cf4 \\combeffect\cf0 ,\{\
	\cf3 var\cf0  effect; \
	\
	effect = \cf3 CombC\cf0 .ar(\cf3 In\cf0 .ar(0,2),0.1,0.1,10);\
	\
	\
	\cf3 Out\cf0 .ar(0,effect)\
\}).add;\
\
\cf2 //A SynthDef which creates a delay effect which can be later applied to the samples.\cf0 \
\cf3 SynthDef\cf0 (\cf4 \\delayeffect\cf0 ,\{\
	\cf3 var\cf0  effect;\
	\
	effect = \cf3 DelayC\cf0 .ar(\cf3 In\cf0 .ar(0,2),0.3,0.1,10);\
	\
	\cf3 Out\cf0 .ar(0,effect)\
\}).add;\
\
\pard\pardeftab560
\cf2 // A SynthDef which creates a 'ping pong' delay effect which bounces sound between outputs which can be later applied to samples.\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf3 SynthDef\cf0 (\cf4 \\ping\cf0 , \{\
	\cf3 var\cf0  effect;\
	\
	effect = \cf3 PingPong\cf0 .ar(\cf3 In\cf0 .ar(0,2),0.5,0.4,1);\
	\
	\cf3 Out\cf0 .ar(0,effect)\
\}).add;\
\
\cf2 //A SynthDef which creates a reverb style delay effect which can be later applied to samples. \cf0 \
\cf3 SynthDef\cf0 (\cf4 \\freeverb\cf0 , \{\
	\cf3 var\cf0  effect;\
	\
	effect = \cf3 FreeVerb\cf0 .ar(\cf3 In\cf0 .ar(0,2),0.5,0.6);\
	\
	\cf3 Out\cf0 .ar(0,effect)\
\}).add;\
);\
\
\
\pard\pardeftab720
\cf2 //load samples (using the file paths defined) into an array and read into a buffer. \cf0 \
b = [\cf5 "sounds/atmosphere.wav"\cf0 ,\cf5 "sounds/atmosphere2.wav"\cf0 ,\cf5 "sounds/atmosphere3.wav"\cf0 ,\cf5 "sounds/atmosphere4.wav"\cf0 ,\cf5 "sounds/VoxDelay.aif"\cf0 ,\cf5 "sounds/Voxreverb.aif"\cf0 ,\cf5 "sounds/verse.aif"\cf0 ,\cf5 "sounds/Wishywasha.aif"\cf0 ,\cf5 "sounds/demons.aif"\cf0 ].collect\{\cf3 |filename|\cf0   \cf3 Buffer\cf0 .read(s,filename); \};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf0 \
b[0]\
b[1]\
b[2]\
b[3]\
b[4]\
b[5]\
b[6]\
b[7]\
b[8]\
\
\
\pard\pardeftab720
\cf2 //Defining variables for 1st order Markov models.\cf0 \
(\
\
\pard\pardeftab560

\fs42 \cf2 //makes a 16bit mono wav file\cf0 \
file = \cf3 SoundFile\cf0 .new.headerFormat_(\cf5 "WAV"\cf0 ).sampleFormat_(\cf5 "int16"\cf0 ).numChannels_(1).sampleRate_(sr);\
\
\cf2 //change the file path here\cf0 \
file.openWrite(\cf5 "/Users/fox/Desktop/gc.wav"\cf0 );\

\fs28 \
\pard\pardeftab720
\cf3 var\cf0  markovmatrix; \
\cf2 //start in one of three states. Choosing which probability distribution to use depends on what state we're in right now.\cf0 \
\cf3 var\cf0  currentstate=3.rand; \
\cf3 var\cf0  markovmatrix2; \
\cf3 var\cf0  currentstate2=3.rand; \
\cf3 var\cf0  markovmatrix3;\
\cf3 var\cf0  currentstate3=3.rand;\
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720
\cf2 //Defining probabilitic values in Markov models \cf0 \
markovmatrix= [\
[0.7,0.2,0.1],\
[0.0,0.5,0.5],\
[0.3,0.4,0.3],\
[0.2,0,5,0.3]\
];\
\
\
markovmatrix2= [\
[0.5,0.2,0.3],\
[0.0,0.5,0.5],\
[0.2,0.4,0.4],\
[0.1,0,4,0.5]\
];\
\
\
markovmatrix3= [\
[0.4,0.3,0.3],\
[0.2,0.4,0.4],\
[0.2,0.4,0.4],\
[0.1,0.7,0.3]\
];\
\
\cf2 // The routines below schedule the compositional elements through use of .wait;\cf0 \
\
\cf2 // Selects a sample from the buffer, randomly sets the duration to anything from 5 to 15 seconds and randomly selects a place in the sample for the sample to begin playing from. It then randomly chooses how long it will wait before playing the next play-through of sample. This particular routine plays through the sample 10 times (10.do). \cf0 \
\{\
	2.wait;\
	10.do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b[5], \cf4 \\dur\cf0 ,rrand(5.0,15.0), \cf4 \\amp\cf0 , rrand(0.1,0.2), \cf4 \\pos\cf0 , rrand(0.0,0.5)]); \
		\
	rrand(2.0,4.0).wait; 	\
	\}\
	\
\
\
\}.fork; \
\
\
\{\
	12.wait;\
	10.do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b[4], \cf4 \\dur\cf0 ,rrand(1.0,5.0), \cf4 \\amp\cf0 , rrand(0.1,0.2), \cf4 \\pos\cf0 , rrand(0.0,0.5)]); \
		\
	rrand(2.0,7.0).wait; 	\
	\}\
\
\}.fork; \
\
	\
\cf2 // This time the sample used is randomly selected from array b using b.choose.  \cf0 \
\{\
	16.wait;\
	10.do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b.choose, \cf4 \\dur\cf0 ,rrand(1.0,10.0), \cf4 \\amp\cf0 , rrand(0.1,0.2), \cf4 \\pos\cf0 , rrand(0.0,0.9)]); \
		\
	rrand(2.0,5.0).wait; 	\
	\}\
\
\}.fork; \
\
	\
\{\
	\
	16.wait;\
	10.do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b.choose, \cf4 \\dur\cf0 ,rrand(10.0,20.0), \cf4 \\amp\cf0 , rrand(0.1,0.2), \cf4 \\pos\cf0 , rrand(0.3,0.5)]); \
		\
	rrand(2.0,6.0).wait; 	\
	\}\
\
\}.fork; \
\
	\
\{\
	32.wait;	\
	\cf3 inf\cf0 .do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b.choose, \cf4 \\dur\cf0 ,rrand(10.0,20.0), \cf4 \\amp\cf0 , rrand(0.1,0.2), \cf4 \\pos\cf0 , rrand(0.0,0.5)]); \
		\
	rrand(2.0,4.0).wait; 	\
	\}\
\
\}.fork; \
\
	\
\{\
	48.wait;\
	\cf3 inf\cf0 .do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b.choose, \cf4 \\dur\cf0 ,rrand(5.0,15.0), \cf4 \\amp\cf0 , rrand(0.1,0.5), \cf4 \\pos\cf0 , rrand(0.0,0.5)]); \
		\
	rrand(2.0,4.0).wait; 	\
	\}\
\
\}.fork; \
 \
\
\{\
	48.wait;	\
	\cf3 inf\cf0 .do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b.choose, \cf4 \\dur\cf0 ,rrand(1.0,5.0), \cf4 \\amp\cf0 , rrand(0.1,0.5), \cf4 \\pos\cf0 , rrand(0.0,0.5)]); \
		\
	rrand(2.0,4.0).wait; 	\
	\}\
\
\}.fork; \
\
	\
\{	\
	56.wait;	\
	\cf3 inf\cf0 .do\{\
		\
		\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\bufnum\cf0 , b.choose, \cf4 \\dur\cf0 , rrand(5.0,10.0) , \cf4 \\amp\cf0 , rrand(0.1,0.5), \cf4 \\pos\cf0 , rrand(0.0,0.5)]); \
		\
	rrand(2.0,4.0).wait; 	\
	\}\
\
\}.fork; \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sa240
\cf2 //The Markov models are now introuduced. Samples are put put into the matrix using w.choose. This first matrix changes the duration of the sample played determined by probabilistic outcome. \cf0 	\
\{\
\pard\pardeftab720
\cf0 	72.wait;\
	10.do\{\
			\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\dur\cf0 , [4.0,5.0,7.0].at(currentstate)]);\
			\
			currentstate = [0,1,2,3].wchoose(markovmatrix[currentstate]); \
			\
		5.0.wait;\
			\};\
\
\}.fork;\
\
	\
\pard\pardeftab720\sa240
\cf2 //Samples are put put into this second matrix using w.choose. This matrix changes the amplitude of the sample played determined by probabilistic outcome. \cf0 \
\pard\pardeftab720
\cf0 \{\
	88.wait;	\
	5.do\{\
			\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\amp\cf0 , [0.05, 0.1, 0.3].at(currentstate2)]);\
			\
			\
			currentstate2 = [0,1,2,3].wchoose(markovmatrix2[currentstate2]); \
			\
		10.0.wait;\
			\};\
\
\}.fork;\
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sa240
\cf2 //Samples are put put into this third matrix using w.choose. This matrix changes the start position of the sample played determined by probabilistic outcome. \cf0 \
\pard\pardeftab720
\cf0 \{\
	106.wait;	\
	5.do\{\
			\cf3 Synth\cf0 (\cf4 \\sampleplayer\cf0 ,[\cf4 \\pos\cf0 , [0.0, 0.3, 0.6].at(currentstate2)]);\
			\
			\
			currentstate3 = [0,1,2,3].wchoose(markovmatrix3[currentstate3]); \
			\
		5.0.wait;\
			\};\
\
\}.fork;\
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sa240
\cf2 //This applies the \\myeffect comb delay effect 20 seconds into the piece. \cf0 \
	20.wait;\
\pard\pardeftab720\sa240
\cf3 Synth\cf0 .tail(s,\cf4 \\combeffect\cf0 ); \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sa240
\cf2 //This applies the \\delay effect at a random point between 30 and 60 seconds into the piece. \cf0 \
\pard\pardeftab720
\cf0 	rrand(30.0,60.0).wait; 	\
\cf3 Synth\cf0 .tail(s,\cf4 \\delayeffect\cf0 );\
\
\pard\pardeftab720\sa240
\cf2 //This applies the \\ping effect at a random point between 40 and 70 seconds into the piece. \cf0 \
\pard\pardeftab720
\cf0 	rrand(40.0,70.0).wait; \
\cf3 Synth\cf0 .tail(s,\cf4 \\ping\cf0 );\
\
\pard\pardeftab720\sa240
\cf2 //This applies the \\freeverb effect at a random point between 10 and 20 seconds into the piece. \cf0 \
\pard\pardeftab720
\cf0 	rrand(10.0,20.0).wait;\
\cf3 Synth\cf0 .tail(s,\cf4 \\freeverb\cf0 );\
\
\cf2 //The program will continue to generate music until it is physically stopped due to some routines playing infinitely due to inf.do though due to some routines stopping the texture will be reduce. \cf0 \
\pard\pardeftab720\sa240
\cf0 )\
}